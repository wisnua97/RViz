# Install and import required libraries
require(shiny)
require(ggplot2)
require(leaflet)
require(tidyverse)
require(httr)
require(scales)
# Import model_prediction R which contains methods to call OpenWeather API
# and make predictions
source("model_prediction.R")

test_weather_data_generation<-function(){
  #Test generate_city_weather_bike_data() function
  city_weather_bike_df<-generate_city_weather_bike_data()
  stopifnot(length(city_weather_bike_df)>0)
  print(head(city_weather_bike_df))
  return(city_weather_bike_df)
}

# Create a RShiny server
shinyServer(function(input, output){
  city_weather_bike_df <- test_weather_data_generation()
  # Define a city list
  city_list <- c("All", "Seoul", "Suzhou", "London", "New York", "Paris")
  })
  # Define color factor
  color_levels <- colorFactor(c("green", "yellow", "red"), 
                              levels = c("small", "medium", "large"))
  #city_weather_bike_df <- test_weather_data_generation()
  city_weather_bike_df <- test_weather_data_generation()
  
  # Create another data frame called `cities_max_bike` with each row contains city location info and max bike
  # prediction for the city
  cities_max_bike <- city_weather_bike_df %>% 
    group_by(CITY) %>% 
    summarize(
      LAT = first(LAT),
      LONG = first(LONG),
      BIKE_PREDICTION_LEVEL = max(BIKE_PREDICTION_LEVEL),
      LABEL = first(LABEL),
      DETAILED_LABEL = first(DETAILED_LABEL)
    )
  
  # Define a default map with all cities
  output$city_map <- renderLeaflet({
    leaflet(data = cities_max_bike) %>%
      addCircleMarkers(lng = ~LONG, lat = ~LAT, 
                       color = ~color_levels(BIKE_PREDICTION_LEVEL),
                       radius = ~case_when(BIKE_PREDICTION_LEVEL == "small" ~ 6,
                                           BIKE_PREDICTION_LEVEL == "medium" ~ 10,
                                           BIKE_PREDICTION_LEVEL == "large" ~ 12),
                       popup = ~LABEL)
  })
  
  # Observe drop-down event
  observeEvent(input$city_dropdown, {
    selected_city <- input$city_dropdown
    if(selected_city != 'All') {
      # Filter data for selected city
      city_data <- city_weather_bike_df %>% filter(CITY == selected_city)
      
      # Render city-specific map
      output$city_map <- renderLeaflet({
        leaflet(data = city_data) %>%
          addMarkers(lng = ~LONG, lat = ~LAT, popup = ~DETAILED_LABEL)
      })
      
      # Render bike-sharing demand prediction trend plot for selected city
      output$city_bike_trend_plot <- renderPlot({
        ggplot(city_data, aes(x = HUMIDITY, y = BIKE_PREDICTION)) +
          geom_point() +
          geom_smooth(method = "lm", formula = y ~ poly(x, 4)) +
          labs(x = "Humidity", y = "Bike-sharing demand prediction",
               title = paste("Bike-sharing Demand Prediction Trend for", selected_city)) +
          theme_bw()
      })
      
    } else {
      # Render default map with all cities
      output$city_map <- renderLeaflet({
        leaflet(data = cities_max_bike) %>%
          addCircleMarkers(lng = ~LONG, lat = ~LAT, color = ~color_levels(BIKE_PREDICTION_LEVEL),
                           radius = ~case_when(BIKE_PREDICTION_LEVEL == "small" ~ 6,
                                               BIKE_PREDICTION_LEVEL == "medium" ~ 10,
                                               BIKE_PREDICTION_LEVEL == "large" ~ 12),
                           popup = ~LABEL)
      })
      
      # Render bike-sharing demand prediction trend plot for all cities
      output$city_bike_trend_plot <- renderPlot({
        ggplot(city_weather_bike_df, aes(x = HUMIDITY, y = BIKE_PREDICTION, color = CITY)) +
          geom_point() +
          geom_smooth(method = "lm", formula = y ~ poly(x, 4)) +
          labs(x = "Humidity", y = "Bike-sharing demand prediction",
               title = "Bike-sharing Demand Prediction Trend for All Cities") +
          theme_bw()
      })
    } 
  })
  
  # Render output plots with an id defined in ui.R
  output$city_bike_plot <- renderPlot({
    ggplot(city_weather_bike_df, aes(x = WEATHER, y = BIKES_AVAILABLE, color = BIKE_PREDICTION_LEVEL)) +
      geom_point() +
      scale_color_manual(values = c("green", "yellow", "red"), 
                         labels = c("small", "medium", "large")) +
      labs(x = "Weather", y = "Number of Bikes Available", 
           title = "Weather vs Number of Bikes Available by Bike Prediction Level") +
      theme_bw()
  })
  # Create a temperature trend plot
  if(input$city_dropdown != 'All') {
    # Filter data for selected city
    city_data <- city_weather_bike_df %>% filter(CITY == input$city_dropdown)
    
    ggplot(city_data, aes(x = TIME, y = TEMPERATURE)) +
      geom_line() +
      geom_point() +
      geom_text(aes(label = TEMPERATURE), vjust = -1) +
      labs(x = "Time", y = "Temperature",
           title = paste("Temperature Trend for", input$city_dropdown)) +
      theme_bw()
  } else {
    ggplot(city_weather_bike_df, aes(x = TIME, y = TEMPERATURE)) +
      geom_line() +
      geom_point() +
      geom_text(aes(label = TEMPERATURE), vjust = -1) +
      labs(x = "Time", y = "Temperature",
           title = "Temperature Trend for All Cities") +
      theme_bw()
    }
# Run the app
shinyApp(ui, server)
